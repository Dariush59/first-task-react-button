{"version":3,"sources":["MyButton.js","BtstrpButton.js","App.js","serviceWorker.js","index.js"],"names":["MyButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","status","handleClick","bind","assertThisInitialized","setState","react_default","a","createElement","className","concat","onClick","index_esm","Component","BtstrpButton","context","show","handleShow","handleClose","_this$props","name","backgroundColor","color","closeName","acceptName","title","Fragment","Button","variant","style","Modal","onHide","Header","closeButton","Title","Body","Footer","App","src_BtstrpButton","src_MyButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03b547b5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FaThumbsUp, FaThumbsDown } from 'react-icons/fa';\n\nclass MyButton extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            status : false\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick() {\n        this.setState({ status: !this.state.status });\n    }\n\n    render () {\n        return  <button \n                    className={`btn ${(this.state.status ? 'btn-primary' : 'btn-warning')}`}\n                    onClick={this.handleClick}> \n                        {this.state.status ?  'Blue'  : 'Yellow'}\n                        {this.state.status ?  <FaThumbsUp /> : <FaThumbsDown />}\n                </button>\n    }\n}\nexport default MyButton","import React, { Component } from 'react';\nimport { Modal, Button } from 'react-bootstrap';\n\nclass BtstrpButton extends Component {\n    constructor(props, context) {\n      super(props, context);\n      this.state = {\n        show: false\n      }\n      this.handleShow = this.handleShow.bind(this)\n      this.handleClose = this.handleClose.bind(this)\n    }\n  \n    handleClose() {\n      this.setState({ show: false });\n    }\n  \n    handleShow() {\n      this.setState({ show: true });\n    }\n  \n    render() {\n      const {name, backgroundColor, color, closeName, acceptName, title } = this.props\n      return (\n        <>\n          <Button \n            variant=\"primary\" \n            onClick={this.handleShow.bind(this)}\n            style={{\n                backgroundColor:`${backgroundColor}`,\n                color:`${color}`\n            }}>\n            {name}\n          </Button>\n  \n          <Modal show={this.state.show} onHide={this.handleClose}>\n            <Modal.Header closeButton>\n              <Modal.Title>{title ? title : 'Title'}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body\n            style={{\n              backgroundColor:`${backgroundColor}`,\n              color:`${color}`\n            }}>\n              {name} has been ckicked!!!</Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={this.handleClose}>\n                {`${closeName ? closeName : 'Close'}`}\n              </Button>\n              <Button variant=\"primary\" onClick={this.handleClose}>\n                {`${acceptName ? acceptName : 'Okay'}`}\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </>\n      );\n    }\n}\n  \nexport default BtstrpButton;","import React from 'react'\nimport MyButton from './MyButton'\nimport BtstrpButton from './BtstrpButton'\n\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row border\">\n          <div className=\"col text-center\">\n            <p> First Task</p>\n            <BtstrpButton \n                name=\"GREEN\" \n                color=\"yellow\" \n                backgroundColor=\"green\" \n                title=\"Green\"/>\n            \n            <BtstrpButton \n                name=\"RED\"  \n                color=\"blue\" \n                backgroundColor=\"red\" \n                title=\"Red\"/>\n          </div>\n        </div>\n        <div className=\"row border border-top-0\">\n          <div className=\"col text-center\">\n            <p> Extra Practice</p>\n            <MyButton />\n            <MyButton />       \n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}